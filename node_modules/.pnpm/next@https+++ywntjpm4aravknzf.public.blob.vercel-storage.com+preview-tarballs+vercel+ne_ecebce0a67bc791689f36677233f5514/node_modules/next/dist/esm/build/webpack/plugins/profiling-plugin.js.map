{"version":3,"sources":["../../../../src/build/webpack/plugins/profiling-plugin.ts"],"sourcesContent":["import { NormalModule } from 'next/dist/compiled/webpack/webpack'\nimport type { Span } from '../../../trace'\nimport type { webpack } from 'next/dist/compiled/webpack/webpack'\nimport path from 'path'\n\nconst pluginName = 'ProfilingPlugin'\nexport const spans = new WeakMap<webpack.Compilation | webpack.Compiler, Span>()\nconst moduleSpansByCompilation = new WeakMap<\n  webpack.Compilation,\n  WeakMap<webpack.Module, Span>\n>()\nconst makeSpanByCompilation = new WeakMap<webpack.Compilation, Span>()\nconst sealSpanByCompilation = new WeakMap<webpack.Compilation, Span>()\nexport const webpackInvalidSpans = new WeakMap<any, Span>()\n\nconst TRACE_LABELS_SEAL = [\n  'module assets',\n  'create chunk assets',\n  'asset render',\n  'asset emit',\n  'store asset',\n]\n\nfunction inTraceLabelsSeal(label: string) {\n  return TRACE_LABELS_SEAL.some((l) => label.startsWith(l))\n}\n\nexport class ProfilingPlugin {\n  compiler: any\n  runWebpackSpan: Span\n  rootDir: string\n\n  constructor({\n    runWebpackSpan,\n    rootDir,\n  }: {\n    runWebpackSpan: Span\n    rootDir: string\n  }) {\n    this.runWebpackSpan = runWebpackSpan\n    this.rootDir = rootDir\n  }\n  apply(compiler: any) {\n    this.traceTopLevelHooks(compiler)\n    this.traceCompilationHooks(compiler)\n    this.compiler = compiler\n  }\n\n  traceHookPair(\n    spanName: string | (() => string),\n    startHook: any,\n    stopHook: any,\n    {\n      parentSpan,\n      attrs,\n      onStart,\n      onStop,\n    }: {\n      parentSpan?: (...params: any[]) => Span\n      attrs?: any\n      onStart?: (span: Span, ...params: any[]) => void\n      onStop?: (span: Span, ...params: any[]) => void\n    } = {}\n  ) {\n    let span: Span | undefined\n    startHook.tap(\n      { name: pluginName, stage: -Infinity },\n      (...params: any[]) => {\n        const name = typeof spanName === 'function' ? spanName() : spanName\n        const attributes = attrs ? attrs(...params) : attrs\n        span = parentSpan\n          ? parentSpan(...params).traceChild(name, attributes)\n          : this.runWebpackSpan.traceChild(name, attributes)\n\n        if (onStart) onStart(span, ...params)\n      }\n    )\n    stopHook.tap({ name: pluginName, stage: Infinity }, (...params: any[]) => {\n      // `stopHook` may be triggered when `startHook` has not in cases\n      // where `stopHook` is used as the terminating event for more\n      // than one pair of hooks.\n      if (!span) {\n        return\n      }\n\n      if (onStop) onStop(span, ...params)\n      span.stop()\n    })\n  }\n\n  traceTopLevelHooks(compiler: any) {\n    this.traceHookPair(\n      'webpack-compilation',\n      compiler.hooks.thisCompilation,\n      compiler.hooks.afterCompile,\n      {\n        parentSpan: () =>\n          webpackInvalidSpans.get(compiler) || this.runWebpackSpan,\n        attrs: () => ({ name: compiler.name }),\n        onStart: (span, compilation) => {\n          spans.set(compilation, span)\n          spans.set(compiler, span)\n          moduleSpansByCompilation.set(compilation, new WeakMap())\n        },\n      }\n    )\n\n    if (compiler.options.mode === 'development') {\n      this.traceHookPair(\n        () => `webpack-invalidated-${compiler.name}`,\n        compiler.hooks.invalid,\n        compiler.hooks.done,\n        {\n          onStart: (span) => webpackInvalidSpans.set(compiler, span),\n          onStop: () => webpackInvalidSpans.delete(compiler),\n          attrs: (fileName: any) => ({\n            trigger: fileName\n              ? path.relative(this.rootDir, fileName).replaceAll(path.sep, '/')\n              : 'manual',\n          }),\n        }\n      )\n    }\n  }\n\n  traceCompilationHooks(compiler: any) {\n    this.traceHookPair('emit', compiler.hooks.emit, compiler.hooks.afterEmit, {\n      parentSpan: () =>\n        webpackInvalidSpans.get(compiler) || this.runWebpackSpan,\n    })\n\n    this.traceHookPair('make', compiler.hooks.make, compiler.hooks.finishMake, {\n      parentSpan: (compilation) => {\n        const compilationSpan = spans.get(compilation)\n        if (!compilationSpan) {\n          return webpackInvalidSpans.get(compiler) || this.runWebpackSpan\n        }\n\n        return compilationSpan\n      },\n      onStart: (span, compilation) => {\n        makeSpanByCompilation.set(compilation, span)\n      },\n      onStop: (_span, compilation) => {\n        makeSpanByCompilation.delete(compilation)\n      },\n    })\n\n    compiler.hooks.thisCompilation.tap(\n      { name: pluginName, stage: -Infinity },\n      (compilation: any) => {\n        compilation.hooks.buildModule.tap(pluginName, (module: any) => {\n          const moduleType = (() => {\n            const r = module.userRequest\n            if (!r || r.endsWith('!')) {\n              return ''\n            } else {\n              const resource = r.split('!').pop()\n              const match = /^[^?]+\\.([^?]+)$/.exec(resource)\n              return match ? match[1] : ''\n            }\n          })()\n\n          const issuerModule = compilation?.moduleGraph?.getIssuer(module)\n\n          let span: Span\n\n          const moduleSpans = moduleSpansByCompilation.get(compilation)\n          const spanName = `build-module${moduleType ? `-${moduleType}` : ''}`\n          const issuerSpan: Span | undefined =\n            issuerModule && moduleSpans?.get(issuerModule)\n          if (issuerSpan) {\n            span = issuerSpan.traceChild(spanName)\n          } else {\n            let parentSpan: Span | undefined\n            for (const incomingConnection of compilation.moduleGraph.getIncomingConnections(\n              module\n            )) {\n              const entrySpan = spans.get(incomingConnection.dependency)\n              if (entrySpan) {\n                parentSpan = entrySpan\n                break\n              }\n            }\n\n            if (!parentSpan) {\n              const compilationSpan = spans.get(compilation)\n              if (!compilationSpan) {\n                return\n              }\n\n              parentSpan = compilationSpan\n            }\n            span = parentSpan.traceChild(spanName)\n          }\n          span.setAttribute('name', module.userRequest)\n          span.setAttribute('layer', module.layer)\n          moduleSpans!.set(module, span)\n        })\n\n        const moduleHooks = NormalModule.getCompilationHooks(compilation)\n        moduleHooks.readResource.for(undefined).intercept({\n          register(tapInfo: any) {\n            const fn = tapInfo.fn\n            tapInfo.fn = (loaderContext: any, callback: any) => {\n              fn(loaderContext, (err: any, result: any) => {\n                callback(err, result)\n              })\n            }\n            return tapInfo\n          },\n        })\n\n        moduleHooks.loader.tap(\n          pluginName,\n          (loaderContext: any, module: any) => {\n            const moduleSpan = moduleSpansByCompilation\n              .get(compilation)\n              ?.get(module)\n            loaderContext.currentTraceSpan = moduleSpan\n          }\n        )\n\n        compilation.hooks.succeedModule.tap(pluginName, (module: any) => {\n          moduleSpansByCompilation?.get(compilation)?.get(module)?.stop()\n        })\n        compilation.hooks.failedModule.tap(pluginName, (module: any) => {\n          moduleSpansByCompilation?.get(compilation)?.get(module)?.stop()\n        })\n\n        this.traceHookPair(\n          'seal',\n          compilation.hooks.seal,\n          compilation.hooks.afterSeal,\n          {\n            parentSpan: () => spans.get(compilation)!,\n            onStart(span) {\n              sealSpanByCompilation.set(compilation, span)\n            },\n            onStop() {\n              sealSpanByCompilation.delete(compilation)\n            },\n          }\n        )\n\n        compilation.hooks.addEntry.tap(pluginName, (entry: any) => {\n          const parentSpan =\n            makeSpanByCompilation.get(compilation) || spans.get(compilation)\n          if (!parentSpan) {\n            return\n          }\n          const addEntrySpan = parentSpan.traceChild('add-entry')\n          addEntrySpan.setAttribute('request', entry.request)\n          spans.set(entry, addEntrySpan)\n        })\n\n        compilation.hooks.succeedEntry.tap(pluginName, (entry: any) => {\n          spans.get(entry)?.stop()\n          spans.delete(entry)\n        })\n        compilation.hooks.failedEntry.tap(pluginName, (entry: any) => {\n          spans.get(entry)?.stop()\n          spans.delete(entry)\n        })\n\n        this.traceHookPair(\n          'chunk-graph',\n          compilation.hooks.beforeChunks,\n          compilation.hooks.afterChunks,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'optimize',\n          compilation.hooks.optimize,\n          compilation.hooks.reviveModules,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'optimize-modules',\n          compilation.hooks.optimizeModules,\n          compilation.hooks.afterOptimizeModules,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'optimize-chunks',\n          compilation.hooks.optimizeChunks,\n          compilation.hooks.afterOptimizeChunks,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'optimize-tree',\n          compilation.hooks.optimizeTree,\n          compilation.hooks.afterOptimizeTree,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'optimize-chunk-modules',\n          compilation.hooks.optimizeChunkModules,\n          compilation.hooks.afterOptimizeChunkModules,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'module-hash',\n          compilation.hooks.beforeModuleHash,\n          compilation.hooks.afterModuleHash,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'code-generation',\n          compilation.hooks.beforeCodeGeneration,\n          compilation.hooks.afterCodeGeneration,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'hash',\n          compilation.hooks.beforeHash,\n          compilation.hooks.afterHash,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n        this.traceHookPair(\n          'code-generation-jobs',\n          compilation.hooks.afterHash,\n          compilation.hooks.beforeModuleAssets,\n          {\n            parentSpan: () =>\n              sealSpanByCompilation.get(compilation) || spans.get(compilation)!,\n          }\n        )\n\n        const logs = new Map()\n        const originalTime = compilation.logger.time\n        const originalTimeEnd = compilation.logger.timeEnd\n\n        compilation.logger.time = (label: string) => {\n          if (!inTraceLabelsSeal(label)) {\n            return originalTime.call(compilation.logger, label)\n          }\n          const span = sealSpanByCompilation.get(compilation)\n          if (span) {\n            logs.set(label, span.traceChild(label.replace(/ /g, '-')))\n          }\n          return originalTime.call(compilation.logger, label)\n        }\n        compilation.logger.timeEnd = (label: string) => {\n          if (!inTraceLabelsSeal(label)) {\n            return originalTimeEnd.call(compilation.logger, label)\n          }\n\n          const span = logs.get(label)\n          if (span) {\n            span.stop()\n            logs.delete(label)\n          }\n          return originalTimeEnd.call(compilation.logger, label)\n        }\n      }\n    )\n  }\n}\n"],"names":["NormalModule","path","pluginName","spans","WeakMap","moduleSpansByCompilation","makeSpanByCompilation","sealSpanByCompilation","webpackInvalidSpans","TRACE_LABELS_SEAL","inTraceLabelsSeal","label","some","l","startsWith","ProfilingPlugin","constructor","runWebpackSpan","rootDir","apply","compiler","traceTopLevelHooks","traceCompilationHooks","traceHookPair","spanName","startHook","stopHook","parentSpan","attrs","onStart","onStop","span","tap","name","stage","Infinity","params","attributes","traceChild","stop","hooks","thisCompilation","afterCompile","get","compilation","set","options","mode","invalid","done","delete","fileName","trigger","relative","replaceAll","sep","emit","afterEmit","make","finishMake","compilationSpan","_span","buildModule","module","moduleType","r","userRequest","endsWith","resource","split","pop","match","exec","issuerModule","moduleGraph","getIssuer","moduleSpans","issuerSpan","incomingConnection","getIncomingConnections","entrySpan","dependency","setAttribute","layer","moduleHooks","getCompilationHooks","readResource","for","undefined","intercept","register","tapInfo","fn","loaderContext","callback","err","result","loader","moduleSpan","currentTraceSpan","succeedModule","failedModule","seal","afterSeal","addEntry","entry","addEntrySpan","request","succeedEntry","failedEntry","beforeChunks","afterChunks","optimize","reviveModules","optimizeModules","afterOptimizeModules","optimizeChunks","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModules","afterOptimizeChunkModules","beforeModuleHash","afterModuleHash","beforeCodeGeneration","afterCodeGeneration","beforeHash","afterHash","beforeModuleAssets","logs","Map","originalTime","logger","time","originalTimeEnd","timeEnd","call","replace"],"mappings":"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","ignoreList":[0]}